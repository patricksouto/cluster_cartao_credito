#Importação da base de dados
clientes <- read.csv(file = "clientes_cartao_credito")
#Importação da base de dados
clientes <- read.csv(file = "clientes_cartao_credito")
#Importação da base de dados
clientes <- read.csv(file = "D:\Projetos_Data_Science\clusters_cartao de credito\clientes_cartao_credito.csv")
#Importação da base de dados
clientes <- read.csv(file = "D:/Projetos_Data_Science/clusters_cartao de credito/clientes_cartao_credito.csv")
View(clientes)
View(clientes)
#Importação da base de dados
clientes <- read.csv2("clientes_cartao_credito.csv", sep=",", dec = ".")
View(clientes)
View(clientes)
View(clientes)
#Importação da base de dados
clientes <- read.csv("clientes_cartao_credito.csv")
View(clientes)
#Importação da base de dados
clientes <- read.csv("clientes_cartao_credito.csv", sep = ",")
View(clientes)
#Importação da base de dados
clientes <- read.csv("clientes_cartao_credito.csv", sep = ";")
View(clientes)
# Visualizando os dados
View(clientes)
# Visualizando os dados
View(clientes)
# Mudando o nome das colunas
clientes
# Mudando o nome das colunas
nomeColunas <- c("SerialCliente", "IDCliente", "Limite_cartao", "Qtnd_cartoes_cliente", "visitas_banco", "visitas bankline", "total_ligacoes")
names(clientes) <- nomeColunas
head(clientes)
head(clientes)
# Tornando os seriais numeros das linhas
rownames(clientes) <- clientes [,1]
clientes <- clientes[,-1]
# Calculando a matriz de distâncias euclidianas
de <- dist(clientes method = "euclidean")
# Calculando a matriz de distâncias euclidianas
de <- dist(clientes, method = "euclidean")
de
de
# Tornando os seriais números das linhas
rownames(clientes) <- clientes [,1]
# Tornando os seriais números das linhas
rownames(clientes) <- clientes [,2]
head(clientes)
rownames(clientes) <- clientes [,1]
View(clientes)
# Mudando o nome das colunas
nomeColunas <- c("SerialCliente", "IDCliente", "Limite_cartoes", "Qtnd_cartoes_cliente", "visitas_banco", "visitas bankline", "total_ligacoes")
# Visualizando os dados
View(clientes)
names(clientes) <- nomeColunas
View(clientes)
# Mudando o nome das colunas
nomeColunas <- c("IDCliente", "Limite_cartoes", "Qtnd_cartoes_cliente", "visitas_banco", "visitas bankline", "total_ligacoes")
names(clientes) <- nomeColunas
# Eliminando os valores duplicados
duplicados <- duplicated(clientes,fromLast = TRUE)
# Visualizando os dados
View(clientes)
which(duplicados)
# Importando a base de dados
clientes <- read.csv("clientes_cartao_credito2.csv", sep = ";")
# Visualizando os dados
View(clientes)
head(clientes)
# Excluindo a coluna SI_NO, porque não tem utilidade
clientes$Sl_No <- NULL
head(clientes)
# Mudando o nome das colunas
nomeColunas <- c("IDCliente", "Limite_cartoes", "Qtnd_cartoes_cliente", "visitas_banco", "visitas bankline", "total_ligacoes")
names(clientes) <- nomeColunas
# Tornando os IDs números das linhas
rownames(clientes) <- clientes [,1]
clientes <- clientes[,-1]
head(clientes)
# Padronizando as variáveis
clientes_padronizado <- scale(clientes)
View(clientes_padronizado)
View(clientes_padronizado)
View(clientes_padronizado)
View(clientes)
View(clientes)
# Calculando a matriz de distâncias
distancia <- dist(clientes_padronizado, method = "euclidean")
dist()
distancia
# Calculando o cluster pelo método do vizinho mais próximo
cluster.hierarquico <- hclust(distancia, method = "average")
# Criando o dendograma
plot(cluster.hierarquico, cex = 0,6, hang = -1)
# Criando o dendograma
plot(cluster.hierarquico, cex = 0.6, hang = -1)
# Verificando, através do método Elbow, a quantidade ideal de grupos
fviz_nbclust(clientes_padronizado, FUN = hcut, method = "wss")
### BAIXANDO E ATIVANDO PACOTES  ###
library(tidyverse) #pacote para manipulacao de dados
library(cluster) #algoritmo de cluster
library(dendextend) #compara dendogramas
library(factoextra) #algoritmo de cluster e visualizacao
library(fpc) #algoritmo de cluster e visualizacao
library(gridExtra) #para a funcao grid arrange
library(readxl)
# Verificando, através do método Elbow, a quantidade ideal de grupos
fviz_nbclust(clientes_padronizado, FUN = hcut, method = "wss")
# Através do Elbow perce-be que 3 ou 4 grupos é a quantidade ideal. Serão utilizados 4 grupos.
grupo_4 <- cutree(cluster.hierarquico, k = 4)
table(grupo_4)
# Transformando em data frame a saída do cluster
df_clientes_grupo <- data.frame(grupo_4)
grupo_4 <- cutree(cluster.hierarquico, k = 4)
View(df_clientes_grupo)
# Juntando com a base original
base_final <- cbind(clientes, df_clientes_grupo)
View(base_final)
# Por fim, realiza-se uma análise descritiva para identificar os grupos
# Médias das variáveis por grupo
mediagrupo <- base_final %>%
group_by(grupo_4) %>%
summarise(n = n(),
Limite_cartoes = mean(Limite_cartoes),
Qntd_cartoes_cliente = mean(Qntd_cartoes_cliente),
visitas_banco = mean(visitas_banco),
visitas bankline = mean(visitas bankline),
total_ligacoes = mean(total_ligacoes) )
# Mudando o nome das colunas
nomeColunas <- c("IDCliente", "Limite_cartoes", "Qtnd_cartoes_cliente", "visitas_banco", "visitas_bankline", "total_ligacoes")
names(clientes) <- nomeColunas
# Mudando o nome das colunas
nomeColunas <- c("IDCliente", "Limite_cartoes", "Qtnd_cartoes_cliente", "visitas_banco", "visitas_bankline", "total_ligacoes")
names(clientes) <- nomeColunas
View(clientes)
# Mudando o nome das colunas
nomeColunas <- c("Limite_cartoes", "Qtnd_cartoes_cliente", "visitas_banco", "visitas_bankline", "total_ligacoes")
names(clientes) <- nomeColunas
# Por fim, realiza-se uma análise descritiva para identificar os grupos
# Médias das variáveis por grupo
mediagrupo <- base_final %>%
group_by(grupo_4) %>%
summarise(n = n(),
Limite_cartoes = mean(Limite_cartoes),
Qntd_cartoes_cliente = mean(Qntd_cartoes_cliente),
visitas_banco = mean(visitas_banco),
visitas_bankline = mean(visitas_bankline),
total_ligacoes = mean(total_ligacoes) )
# Padronizando as variáveis
clientes_padronizado <- scale(clientes)
View(clientes_padronizado)
# Calculando e visualizando a matriz de distâncias euclidianas
distancia <- dist(clientes_padronizado, method = "euclidean")
distancia
# Calculando o cluster pelo método do vizinho mais próximo
cluster.hierarquico <- hclust(distancia, method = "average")
# Criando o dendograma
plot(cluster.hierarquico, cex = 0.6, hang = -1)
# Verificando, através do método Elbow, a quantidade ideal de grupos
fviz_nbclust(clientes_padronizado, FUN = hcut, method = "wss")
# ciando 4 grupo
grupo_4 <- cutree(cluster.hierarquico, k = 4)
table(grupo_4)
# Transformando em data frame a saída do cluster
df_clientes_grupo <- data.frame(grupo_4)
# Juntando com a base original
base_final <- cbind(clientes, df_clientes_grupo)
# Por fim, realiza-se uma análise descritiva para identificar os grupos
# Médias das variáveis por grupo
mediagrupo <- base_final %>%
group_by(grupo_4) %>%
summarise(n = n(),
Limite_cartoes = mean(Limite_cartoes),
Qntd_cartoes_cliente = mean(Qntd_cartoes_cliente),
visitas_banco = mean(visitas_banco),
visitas_bankline = mean(visitas_bankline),
total_ligacoes = mean(total_ligacoes) )
# Por fim, realiza-se uma análise descritiva para identificar os grupos
# Médias das variáveis por grupo
mediagrupo <- base_final %>%
group_by(grupo_4) %>%
summarise(n = n(),
Limite_cartoes = mean(Limite_cartoes),
Qntd_cartoes_cliente = mean(Qntd_cartoes_cliente),
visitas_banco = mean(visitas_banco),
visitas_bankline = mean(visitas_bankline),
total_ligacoes = mean(total_ligacoes) )
# Visualizando os dados
View(clientes)
# Por fim, realiza-se uma análise descritiva para identificar os grupos
# Médias das variáveis por grupo
mediagrupo <- base_final %>%
group_by(grupo_4) %>%
summarise(n = n(),
Limite_cartoes = mean(Limite_cartoes),
Qtnd_cartoes_cliente = mean(Qtnd_cartoes_cliente),
visitas_banco = mean(visitas_banco),
visitas_bankline = mean(visitas_bankline),
total_ligacoes = mean(total_ligacoes) )
mediagrupo
head(clientes)
# Tornando os IDs números das linhas
rownames(clientes) <- clientes [,1]
View(clientes_padronizado)
View(clientes)
# Verificando, através do método Elbow, a quantidade ideal de grupos
fviz_nbclust(clientes_padronizado, FUN = hcut, method = "wss")
### BAIXANDO E ATIVANDO PACOTES  ###
library(tidyverse) #pacote para manipulacao de dados
library(cluster) #algoritmo de cluster
library(dendextend) #compara dendogramas
library(factoextra) #algoritmo de cluster e visualizacao
library(fpc) #algoritmo de cluster e visualizacao
library(gridExtra) #para a funcao grid arrange
library(readxl)
# Importando a base de dados
clientes <- read.csv("clientes_cartao_credito2.csv", sep = ";")
# Excluindo a coluna SI_NO, porque não tem utilidade
clientes$Sl_No <- NULL
# Mudando o nome das colunas
nomeColunas <- c("Limite_cartoes", "Qtnd_cartoes_cliente", "visitas_banco", "visitas_bankline", "total_ligacoes")
names(clientes) <- nomeColunas
# Tornando os IDs números das linhas
rownames(clientes) <- clientes [,1]
clientes <- clientes[,-1]
# Padronizando as variáveis
clientes_padronizado <- scale(clientes)
View(clientes_padronizado)
# Calculando e visualizando a matriz de distâncias euclidianas
distancia <- dist(clientes_padronizado, method = "euclidean")
# Calculando o cluster pelo método do vizinho mais próximo
cluster.hierarquico <- hclust(distancia, method = "average")
# Criando o dendograma
plot(cluster.hierarquico, cex = 0.6, hang = -1)
# Verificando, através do método Elbow, a quantidade ideal de grupos
fviz_nbclust(clientes_padronizado, FUN = hcut, method = "wss")
# criando 4 grupos
grupo_4 <- cutree(cluster.hierarquico, k = 4)
table(grupo_4)
# Transformando em data frame a saída do cluster
df_clientes_grupo <- data.frame(grupo_4)
# Juntando com a base original
base_final <- cbind(clientes, df_clientes_grupo)
# Por fim, realiza-se uma análise descritiva dos grupos
# Médias das variáveis por grupo
mediagrupo <- base_final %>%
group_by(grupo_4) %>%
summarise(n = n(),
Limite_cartoes = mean(Limite_cartoes),
Qtnd_cartoes_cliente = mean(Qtnd_cartoes_cliente),
visitas_banco = mean(visitas_banco),
visitas_bankline = mean(visitas_bankline),
total_ligacoes = mean(total_ligacoes) )
mediagrupo
# Apesar do método hierárquico não ser o mais adequado pela quantidade de dados, ele nos trouxe um resultado com 4 grupos.
# Através da análise descritiva dos grupos, percebe-se:
# GRUPO 1: 1 indivíduo outlier com alta soma de limite e com apenas 2 cartões. Não costuma visitar o banco fisicamente e nem no bankline. Poderia estar no grupo 4.
# GRUPO 2: 226 indivíduos com o limite mais baixo da amostra, poucos cartões (média de 2.43), poucas visitas fisicas e algumas visitas no bankline, mas com alto número de ligações ao banco.
# GRUPO 3: 379 indivíduos com o limite médio, porém com qntd alta de cartões. Faz mais visitas físicas no banco do que acessa o bankline e tem baixa quantidade de ligações.
# GRUPO 4: 49 indivíduos com limite muito alto, porém com grande quantidade de cartões. Acessam muito o bankline e bem pouco as agências físicas. Baixa taxa de ligações ao banco.
# A partir disso é possível entregar a área de negócio alguns insights:
# MARKETING
# Para estratégia de marketing, pode-se oferecer aos grupos 1 e 4 produtos mais caros, ao grupo 2 produtos mais baratos
# Visualizando os clusters
fviz_cluster(clientes_k2, data = clientes_padronizado, main = "cluster.k2")
# Visualizando os clusters
fviz_cluster(clientes_k2, data = clientes_padronizado, main = "cluster k2")
# Rodando o modelo k-means
clientes_k2 <- kmeans(clientes_padronizado, centers = 2)
# Visualizando os clusters
fviz_cluster(clientes_k2, data = clientes_padronizado, main = "cluster k2")
# Criando cluster de 4 grupos com k-means (rodando o modelo)
clientes_k4 <- kmeans(clientes_padronizado, centers = 4)
# Visualizando os clusters
fviz_cluster(clientes_k4 ,data = clientes_padronizado, mais = "cluster k4")
# Criando cluster de 4 grupos com k-means (rodando o modelo)
clientes_k3 <- kmeans(clientes_padronizado, centers = 3)
# Visualizando os clusters
fviz_cluster(clientes_k3, data = clientes_padronizado, main = "cluster k3")
# Visualizando os clusters
fviz_cluster(clientes_k4 ,data = clientes_padronizado, main = "cluster k4")
# Visualizando os clusters
fviz_cluster(clientes_k3, data = clientes_padronizado, main = "cluster k3")
# Visualizando os clusters
fviz_cluster(clientes_k4 ,data = clientes_padronizado, main = "cluster k4")
# Visualizando os clusters
fviz_cluster(clientes_k3, data = clientes_padronizado, main = "cluster k3")
# Criando gráficos para compará-los
G2 <- fviz_cluster(clientes_k2, geom = "point", data = clientes_padronizado) + ggtitle ("k = 2")
# Criando gráficos para compará-los
G2 <- fviz_cluster(clientes_k2, geom = "point", data = clientes_padronizado) + ggtitle ("k = 2")
G3 <- fviz_cluster(clientes_k3, geom = "point", data = clientes_padronizado) + ggtitle ("K = 3")
G4 <- fviz_cluster(clientes_k4, geom = "point", data = clientes_padronizado) +ggtitle ("k = 4")
# Comparando os três gráficos na mesma tela
grid.arrange(G2, G3, G4, nrow = 2)
# Transformando os grupos em data frames
gruposfinal <- data.frame(clientes_k3)
table(clientes_k3)
table(G3)
# Juntando os dados
clientes2 <- read.csv("clientes_cartao_credito2.csv", sep = ";")
clientes2clusters <- data.frame(clientes_k3$cluster)
View(clientes2)
View(clientes2clusters)
View(clientes2)
# Agrupando clusters e base inicial
clientesfinal <- cbind(clientes2, clientes2clusters)
View(clientes2clusters)
View(clientesfinal)
View(clientesfinal)
View(clientesfinal)
# Por fim, realiza-se uma análise descritiva dos grupos
# Médias das variáveis por grupo
head(clientesfinal)
# Por fim, realiza-se uma análise descritiva dos grupos
# Médias das variáveis por grupo
head(clientesfinal)
mediagrupo_k <- clientesfinal %>%
group_by(clientes_k3.cluster) %>%
summarise(n = n(),
Avg_Credit_Limit = mean(Avg_Credit_Limit),
Total_Credit_Cards = mean(Total_Credit_Cards),
Total_visits_bank = mean(Total_visits_bank),
Total_visits_online = mean(Total_visits_online),
Total_calls_made = mean(Total_calls_made) )
mediagrupo
mediagrupo_k
str(clientes)
View(clientes)
# Importando a base de dados
clientes <- read.csv("clientes_cartao_credito2.csv", sep = ";")
# Visualizando os dados
View(clientes)
str(clientes)
View(clientes)
View(clientes)
# Criando cluster de 2 grupos com k-means (rodando o modelo)
clientes_k2 <- kmeans(clientes_padronizado, centers = 2)
# Visualizando os clusters
fviz_cluster(clientes_k2, data = clientes_padronizado, main = "Cluster k2")
### BAIXANDO E ATIVANDO PACOTES ###
library(tidyverse) #pacote para manipulacao de dados
library(cluster) #algoritmo de cluster
library(dendextend) #compara dendogramas
library(factoextra) #algoritmo de cluster e visualizacao
library(fpc) #algoritmo de cluster e visualizacao
library(gridExtra) #para a funcao grid arrange
library(readxl)
# Criando cluster de 2 grupos com k-means (rodando o modelo)
clientes_k2 <- kmeans(clientes_padronizado, centers = 2)
# Visualizando os clusters
fviz_cluster(clientes_k2, data = clientes_padronizado, main = "Cluster k2")
# Criando cluster de 4 grupos com k-means (rodando o modelo)
clientes_k4 <- kmeans(clientes_padronizado, centers = 4)
# Visualizando os clusters
fviz_cluster(clientes_k4 ,data = clientes_padronizado, main = "Cluster k4")
# Criando cluster de 3 grupos com k-means (rodando o modelo)
clientes_k3 <- kmeans(clientes_padronizado, centers = 3)
# Visualizando os clusters
fviz_cluster(clientes_k3, data = clientes_padronizado, main = "Cluster k3")
# Criando gráficos para compará-los
G2 <- fviz_cluster(clientes_k2, geom = "point", data = clientes_padronizado) + ggtitle ("k = 2")
G3 <- fviz_cluster(clientes_k3, geom = "point", data = clientes_padronizado) + ggtitle ("K = 3")
G4 <- fviz_cluster(clientes_k4, geom = "point", data = clientes_padronizado) +ggtitle ("k = 4")
# Comparando os três gráficos na mesma tela
grid.arrange(G2, G3, G4, nrow = 2)
# Juntando os dados
clientes2 <- read.csv("clientes_cartao_credito2.csv", sep = ";")
clientes2clusters <- data.frame(clientes_k3$cluster)
# Agrupando clusters e base inicial
clientesfinal <- cbind(clientes2, clientes2clusters)
# Agrupando clusters e base inicial
clientesfinal <- cbind(clientes2, clientes2clusters)
# Por fim, realiza-se uma análise descritiva dos grupos
# Médias das variáveis por grupo
head(clientesfinal)
mediagrupo_k <- clientesfinal %>%
group_by(clientes_k3.cluster) %>%
summarise(n = n(),
Avg_Credit_Limit = mean(Avg_Credit_Limit),
Total_Credit_Cards = mean(Total_Credit_Cards),
Total_visits_bank = mean(Total_visits_bank),
Total_visits_online = mean(Total_visits_online),
Total_calls_made = mean(Total_calls_made) )
mediagrupo_k
mediagrupo_k
mediagrupo_k
